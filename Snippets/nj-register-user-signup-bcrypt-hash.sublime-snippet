<snippet>
<content><![CDATA[
///////////////////////////////////////////////////////
  User.findOne({ email: req.body.email }).then(user => {
    if (user) {
      errors.email = 'Email already exists';
      return res.status(400).json(errors);
    } else {
      const avatar = gravatar.url(req.body.email, {
        s: '200', // Size
        r: 'pg', // Rating
        d: 'mm' // Default
      });

      const newUser = new User({
        name: req.body.name,
        email: req.body.email,
        avatar,
        password: req.body.password
      });

// const bcrypt = require('bcryptjs');
      bcrypt.genSalt(10, (err, salt) => {
        bcrypt.hash(newUser.password, salt, (err, hash) => {
          if (err) throw err;
          newUser.password = hash;
          newUser
            .save()
            .then(user => res.json(user))
            .catch(err => console.log(err));
        });
      });
    }
  });
////////////////////////////////////////////////////////
]]></content>
<tabTrigger>nj-register-user-signup-bcrypt-hash</tabTrigger>
<description>nj-register-user-signup-bcrypt-hash</description>
<scope>source.js, meta.group.braces.round.js, meta.group.braces.curly.js, comment.line.double-slash.js, punctuation.definition.comment.js</scope>
</snippet>